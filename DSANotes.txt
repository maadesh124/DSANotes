auth token for repo =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  (expiry date 28 sept 2025)

1.Array two Pointer best practices
	-use while instead of for loop
	-update(increment or decrement) only one pointer in each iteration
	-use continue statements
	-make sure that right pointer always leads left pointer
	
2.Array when upper and lower limits of arr[i] is known(conditions like 1<=arr[i]<=N).works only for Integers
	-you can store 2 numbers in arr[i] one should follow above condition.
		let 'a' and 'b' be two numbers, a<=N
		arr[i]=b*N +a;
		when you need 'b' just perform arr[i]/N, when you need 'a' perform arr[i]%N.

3.Array -bit manipuation.examples: find missing number
	-XOR is commutative and associative
	-a^b^c^d=d^c^a^b can be calculated in any oreder (associative property)
	-a^a=0 ,0^a=a^0=a.
	
	
	
4.When you need a data structure with O(1) insertion, deletion and O(1) search operation use HashMap.
	-Store element to be searched as key and its associated data as value 				in map,now search can be performd in O(1) ,worst case= O(n)
	-example : 2 sum problem -return i,j such that arr[i]+arr[j]==k(given num),
	-brute forsce:iterate through arr for each arr[i] check wheather k-arr[i] exits in arr
	-this takes O(n^2) time complexity. 
	-optimised oproach:store all elements of arr in map such that key=arr[i] ,value=i.
	-now perform search in map instead of array,time complexity=O(n) ,(worst case=O(n^2),this is very very rare)
	
		-
		

5.Memoization in dynamic programming 
	-first find a recursive solution to the given problem(use divide and conquer)
	-store the observation or result obtained in each iteration in a data structure
	-use the data in this datastructure when needed
	reference="https://youtu.be/P8Xa2BitN3I?si=smMDNaH9n7bgnYDF"
	
